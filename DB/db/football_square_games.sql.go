// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: football_square_games.sql

package db

import (
	"context"
	"database/sql"
)

const createFootballSquareGame = `-- name: CreateFootballSquareGame :execlastid
INSERT INTO football_square_games (
  game_id, square_id, row_index, column_index
) VALUES (
  ?, ?, ?, ?
)
`

type CreateFootballSquareGameParams struct {
	GameID      sql.NullInt32
	SquareID    sql.NullInt32
	RowIndex    sql.NullInt32
	ColumnIndex sql.NullInt32
}

func (q *Queries) CreateFootballSquareGame(ctx context.Context, arg CreateFootballSquareGameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createFootballSquareGame,
		arg.GameID,
		arg.SquareID,
		arg.RowIndex,
		arg.ColumnIndex,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getFootballSquareGameByGameID = `-- name: GetFootballSquareGameByGameID :many
SELECT game_id, square_id, user_id, winner, winner_quarter_number, row_index, column_index
FROM football_square_games football 
WHERE
  football.game_id = ?
`

type GetFootballSquareGameByGameIDRow struct {
	GameID              sql.NullInt32
	SquareID            sql.NullInt32
	UserID              sql.NullInt32
	Winner              sql.NullBool
	WinnerQuarterNumber sql.NullInt16
	RowIndex            sql.NullInt32
	ColumnIndex         sql.NullInt32
}

func (q *Queries) GetFootballSquareGameByGameID(ctx context.Context, gameID sql.NullInt32) ([]GetFootballSquareGameByGameIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFootballSquareGameByGameID, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFootballSquareGameByGameIDRow
	for rows.Next() {
		var i GetFootballSquareGameByGameIDRow
		if err := rows.Scan(
			&i.GameID,
			&i.SquareID,
			&i.UserID,
			&i.Winner,
			&i.WinnerQuarterNumber,
			&i.RowIndex,
			&i.ColumnIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
