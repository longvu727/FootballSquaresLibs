// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: football_square_games.sql

package db

import (
	"context"
	"database/sql"
)

const createFootballSquareGame = `-- name: CreateFootballSquareGame :execlastid
INSERT INTO football_square_games (
  game_id, square_id, row_index, column_index
) VALUES (
  ?, ?, ?, ?
)
`

type CreateFootballSquareGameParams struct {
	GameID      sql.NullInt32
	SquareID    sql.NullInt32
	RowIndex    sql.NullInt32
	ColumnIndex sql.NullInt32
}

func (q *Queries) CreateFootballSquareGame(ctx context.Context, arg CreateFootballSquareGameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createFootballSquareGame,
		arg.GameID,
		arg.SquareID,
		arg.RowIndex,
		arg.ColumnIndex,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getFootballSquareGame = `-- name: GetFootballSquareGame :one
SELECT football_square_game_id, game_id, square_id, user_id, winner, winner_quarter_number, row_index, column_index
FROM football_square_games football 
WHERE
  football.football_square_game_id = ?
`

type GetFootballSquareGameRow struct {
	FootballSquareGameID int32
	GameID               sql.NullInt32
	SquareID             sql.NullInt32
	UserID               sql.NullInt32
	Winner               sql.NullBool
	WinnerQuarterNumber  sql.NullInt16
	RowIndex             sql.NullInt32
	ColumnIndex          sql.NullInt32
}

func (q *Queries) GetFootballSquareGame(ctx context.Context, footballSquareGameID int32) (GetFootballSquareGameRow, error) {
	row := q.db.QueryRowContext(ctx, getFootballSquareGame, footballSquareGameID)
	var i GetFootballSquareGameRow
	err := row.Scan(
		&i.FootballSquareGameID,
		&i.GameID,
		&i.SquareID,
		&i.UserID,
		&i.Winner,
		&i.WinnerQuarterNumber,
		&i.RowIndex,
		&i.ColumnIndex,
	)
	return i, err
}

const getFootballSquareGameByGameID = `-- name: GetFootballSquareGameByGameID :many
SELECT football.football_square_game_id, football.game_id, football.square_id,
        football.user_id, users.user_name, users.alias, football.winner,
        football.winner_quarter_number, football.row_index, football.column_index
FROM football_square_games football 
  left join users on(football.user_id = users.user_id)
WHERE
  football.game_id = ?
`

type GetFootballSquareGameByGameIDRow struct {
	FootballSquareGameID int32
	GameID               sql.NullInt32
	SquareID             sql.NullInt32
	UserID               sql.NullInt32
	UserName             sql.NullString
	Alias                sql.NullString
	Winner               sql.NullBool
	WinnerQuarterNumber  sql.NullInt16
	RowIndex             sql.NullInt32
	ColumnIndex          sql.NullInt32
}

func (q *Queries) GetFootballSquareGameByGameID(ctx context.Context, gameID sql.NullInt32) ([]GetFootballSquareGameByGameIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFootballSquareGameByGameID, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFootballSquareGameByGameIDRow
	for rows.Next() {
		var i GetFootballSquareGameByGameIDRow
		if err := rows.Scan(
			&i.FootballSquareGameID,
			&i.GameID,
			&i.SquareID,
			&i.UserID,
			&i.UserName,
			&i.Alias,
			&i.Winner,
			&i.WinnerQuarterNumber,
			&i.RowIndex,
			&i.ColumnIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reserveFootballSquareByGameIDRowIndexColumnIndex = `-- name: ReserveFootballSquareByGameIDRowIndexColumnIndex :exec
UPDATE football_square_games football
SET football.user_id = ?
WHERE football.football_square_game_id = ?
  AND football.row_index = ?
  AND football.column_index = ?
`

type ReserveFootballSquareByGameIDRowIndexColumnIndexParams struct {
	UserID               sql.NullInt32
	FootballSquareGameID int32
	RowIndex             sql.NullInt32
	ColumnIndex          sql.NullInt32
}

func (q *Queries) ReserveFootballSquareByGameIDRowIndexColumnIndex(ctx context.Context, arg ReserveFootballSquareByGameIDRowIndexColumnIndexParams) error {
	_, err := q.db.ExecContext(ctx, reserveFootballSquareByGameIDRowIndexColumnIndex,
		arg.UserID,
		arg.FootballSquareGameID,
		arg.RowIndex,
		arg.ColumnIndex,
	)
	return err
}
