// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (user_guid, ip, device_name, user_name, alias)
    VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	UserGuid   string
	Ip         sql.NullString
	DeviceName sql.NullString
	UserName   sql.NullString
	Alias      sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.UserGuid,
		arg.Ip,
		arg.DeviceName,
		arg.UserName,
		arg.Alias,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_guid, ip, device_name, user_name, alias
FROM users 
WHERE
  users.user_id = ?
`

type GetUserRow struct {
	UserID     int32
	UserGuid   string
	Ip         sql.NullString
	DeviceName sql.NullString
	UserName   sql.NullString
	Alias      sql.NullString
}

func (q *Queries) GetUser(ctx context.Context, userID int32) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.UserGuid,
		&i.Ip,
		&i.DeviceName,
		&i.UserName,
		&i.Alias,
	)
	return i, err
}

const getUserByGUID = `-- name: GetUserByGUID :one
SELECT user_guid, ip, device_name, user_name, alias
FROM users 
WHERE
  users.user_guid = ?
`

type GetUserByGUIDRow struct {
	UserGuid   string
	Ip         sql.NullString
	DeviceName sql.NullString
	UserName   sql.NullString
	Alias      sql.NullString
}

func (q *Queries) GetUserByGUID(ctx context.Context, userGuid string) (GetUserByGUIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByGUID, userGuid)
	var i GetUserByGUIDRow
	err := row.Scan(
		&i.UserGuid,
		&i.Ip,
		&i.DeviceName,
		&i.UserName,
		&i.Alias,
	)
	return i, err
}
