// Code generated by MockGen. DO NOT EDIT.
// Source: querier.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/longvu727/FootballSquaresLibs/DB/db"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateFootballSquareGame mocks base method.
func (m *MockQuerier) CreateFootballSquareGame(ctx context.Context, arg db.CreateFootballSquareGameParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFootballSquareGame", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFootballSquareGame indicates an expected call of CreateFootballSquareGame.
func (mr *MockQuerierMockRecorder) CreateFootballSquareGame(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFootballSquareGame", reflect.TypeOf((*MockQuerier)(nil).CreateFootballSquareGame), ctx, arg)
}

// CreateGames mocks base method.
func (m *MockQuerier) CreateGames(ctx context.Context, arg db.CreateGamesParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGames", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGames indicates an expected call of CreateGames.
func (mr *MockQuerierMockRecorder) CreateGames(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGames", reflect.TypeOf((*MockQuerier)(nil).CreateGames), ctx, arg)
}

// CreateSquare mocks base method.
func (m *MockQuerier) CreateSquare(ctx context.Context, arg db.CreateSquareParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSquare", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSquare indicates an expected call of CreateSquare.
func (mr *MockQuerierMockRecorder) CreateSquare(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSquare", reflect.TypeOf((*MockQuerier)(nil).CreateSquare), ctx, arg)
}

// GetFootballSquareGame mocks base method.
func (m *MockQuerier) GetFootballSquareGame(ctx context.Context, footballSquareGameID int32) (db.GetFootballSquareGameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFootballSquareGame", ctx, footballSquareGameID)
	ret0, _ := ret[0].(db.GetFootballSquareGameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFootballSquareGame indicates an expected call of GetFootballSquareGame.
func (mr *MockQuerierMockRecorder) GetFootballSquareGame(ctx, footballSquareGameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFootballSquareGame", reflect.TypeOf((*MockQuerier)(nil).GetFootballSquareGame), ctx, footballSquareGameID)
}

// GetFootballSquareGameByGameID mocks base method.
func (m *MockQuerier) GetFootballSquareGameByGameID(ctx context.Context, gameID sql.NullInt32) ([]db.GetFootballSquareGameByGameIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFootballSquareGameByGameID", ctx, gameID)
	ret0, _ := ret[0].([]db.GetFootballSquareGameByGameIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFootballSquareGameByGameID indicates an expected call of GetFootballSquareGameByGameID.
func (mr *MockQuerierMockRecorder) GetFootballSquareGameByGameID(ctx, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFootballSquareGameByGameID", reflect.TypeOf((*MockQuerier)(nil).GetFootballSquareGameByGameID), ctx, gameID)
}

// GetGame mocks base method.
func (m *MockQuerier) GetGame(ctx context.Context, gameID int32) (db.GetGameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", ctx, gameID)
	ret0, _ := ret[0].(db.GetGameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockQuerierMockRecorder) GetGame(ctx, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockQuerier)(nil).GetGame), ctx, gameID)
}

// GetGameByGUID mocks base method.
func (m *MockQuerier) GetGameByGUID(ctx context.Context, gameGuid string) (db.GetGameByGUIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameByGUID", ctx, gameGuid)
	ret0, _ := ret[0].(db.GetGameByGUIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameByGUID indicates an expected call of GetGameByGUID.
func (mr *MockQuerierMockRecorder) GetGameByGUID(ctx, gameGuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameByGUID", reflect.TypeOf((*MockQuerier)(nil).GetGameByGUID), ctx, gameGuid)
}

// GetSquare mocks base method.
func (m *MockQuerier) GetSquare(ctx context.Context, squareID int32) (db.GetSquareRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSquare", ctx, squareID)
	ret0, _ := ret[0].(db.GetSquareRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSquare indicates an expected call of GetSquare.
func (mr *MockQuerierMockRecorder) GetSquare(ctx, squareID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSquare", reflect.TypeOf((*MockQuerier)(nil).GetSquare), ctx, squareID)
}
